"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º FastAPI
"""

import logging
import time

from fastapi import FastAPI, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi

from models import OperationResult, GenerateQueryModel, GenerateResultModel, FeedbackModel
from config import Config
from database import Database, DBException
from utils import is_valid, parse_query_string, UtilsException
from nn_api import NNException, NNApi

logging.basicConfig(format="%(asctime)s %(message)s", handlers=[logging.FileHandler(
    f"/home/logs/log_{time.ctime()}.txt", mode="w", encoding="UTF-8")], datefmt="%H:%M:%S UTC", level=logging.INFO)

app = FastAPI()
config = Config("config.json")
db = Database(config.db_user, config.db_password,
              config.db_name, config.db_port, config.db_host)

origins = [
    "*",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


DESCRIPTION = """
–í—ã–ø—É—Å–∫–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –û–¶ VK –≤ –ú–ì–¢–£ –∫–æ–º–∞–Ω–¥—ã Team Rattlesnake. –°–µ—Ä–≤–∏—Å, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ. –°—Ç–∞–Ω—å—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤ —Å–µ—Ç–∏ —Å –ø–æ–º–æ—â—å—é Strawberry!

* –ö–æ–ª–µ–Ω–∫–æ–≤ –ê–Ω–¥—Ä–µ–π - Team Lead, Backend Python Dev üçì
* –†–æ–º–∞–Ω –ú–µ–¥–Ω–∏–∫–æ–≤ - Frontend React Dev üçì
* –í–∞—Å–∏–ª–∏–π –ï—Ä–º–∞–∫–æ–≤ - Data Scientist üçì

"""


def custom_openapi():
    """
    –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    """
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Strawberryüçì",
        version="0.5.0 - Clean Slate",
        description=DESCRIPTION,
        routes=app.routes,
    )
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi


@app.on_event("startup")
def startup():
    """
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –µ–µ, –µ—Å–ª–∏ –¥–∞
    """
    logging.info("Server started")
    try:
        if db.need_migration():
            logging.info("Creating tables...")
            db.migrate()
            logging.info("Creating tables...\tOK")
    except DBException as exc:
        logging.error(f"Error while checking tables: {exc}")
        raise Exception(f"Error! {exc} Restarting...") from exc


@app.post('/send_feedback', response_model=OperationResult)
def send_feedback(data: FeedbackModel, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.

    result_id - int, –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.

    score - int,  –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ 1 –∏–ª–∏ -1 (—Ö–æ—Ç—è –º–æ–∂–Ω–æ –∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    result_id = data.result_id
    score = data.score
    logging.info(f"/send_feedback\tresult_id={result_id}; score={score}")

    try:
        db.change_rating(result_id, score)
        logging.info(
            f"/send_feedback\tresult_id={result_id}; score={score}\tOK")
        return OperationResult(code=0, message="Score updated")
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return OperationResult(code=6, message=f"{exc}")


@app.post("/generate_text", response_model=GenerateResultModel)
def generate_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫—É—é –º—ã—Å–ª—å, –æ —á–µ–º –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    texts = data.context_data
    hint = data.hint
    logging.info(f"/generate_text\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())
        api.load_context(config.gen_context_path)
        api.prepare_query(texts, hint)
        logging.info(
            f"Ready to send request to ChatGPT with token={api.token}; query={api.query}")
        api.send_request()
        result = api.get_result()
        result_id = db.add_generated_data(hint, result)
        logging.info(
            f"/generate_text\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResultModel(status=OperationResult(code=0, message="Text generated"), text_data=result, result_id=result_id)
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=2, message=f"{exc}"), text_data="", result_id=-1)
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=6, message=f"{exc}"), text_data="", result_id=-1)


@app.post("/append_text", response_model=GenerateResultModel)
def append_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∫ –∫–æ–Ω—Ü—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–µ–∫—Å—Ç
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    texts = data.context_data
    hint = data.hint
    logging.info(f"/append_text\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())
        api.load_context(config.append_context_path)
        api.prepare_query(texts, hint)
        logging.info(
            f"Ready to send request to ChatGPT with token={api.token}; query={api.query}")
        api.send_request()
        result = api.get_result()
        result_id = db.add_generated_data(hint, result)
        logging.info(f"/append_text\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResultModel(status=OperationResult(code=0, message="Text appended"), text_data=result, result_id=result_id)
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=2, message=f"{exc}"), text_data="", result_id=-1)
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=6, message=f"{exc}"), text_data="", result_id=-1)


@app.post("/rephrase_text", response_model=GenerateResultModel)
def rephrase_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã, –Ω–æ –±–æ–ª–µ–µ —Å–∫–ª–∞–¥–Ω—ã–π –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    texts = data.context_data
    hint = data.hint
    logging.info(f"/rephrase_text\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())
        api.load_context(config.rephrase_context_path)
        api.prepare_query(texts, hint)
        logging.info(
            f"Ready to send request to ChatGPT with token={api.token}; query={api.query}")
        api.send_request()
        result = api.get_result()
        result_id = db.add_generated_data(hint, result)
        logging.info(
            f"/rephrase_text\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResultModel(status=OperationResult(code=0, message="Text rephrased"), text_data=result, result_id=result_id)
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=2, message=f"{exc}"), text_data="", result_id=-1)
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=6, message=f"{exc}"), text_data="", result_id=-1)


@app.post("/summarize_text", response_model=GenerateResultModel)
def summarize_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –†–µ–∑—é–º–∏—Ä—É–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–ª—É—á—à–µ –¥–ª–∏–Ω–Ω—ã–π), –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —Å–∂–∞—Ç—å
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    texts = data.context_data
    hint = data.hint
    logging.info(f"/summarize_text\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())
        api.load_context(config.summarize_context_path)
        api.prepare_query(texts, hint)
        logging.info(
            f"Ready to send request to ChatGPT with token={api.token}; query={api.query}")
        api.send_request()
        result = api.get_result()
        result_id = db.add_generated_data(hint, result)
        logging.info(
            f"/summarize_text\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResultModel(status=OperationResult(code=0, message="Text summarized"), text_data=result, result_id=result_id)
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=2, message=f"{exc}"), text_data="", result_id=-1)
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=6, message=f"{exc}"), text_data="", result_id=-1)


@app.post("/extend_text", response_model=GenerateResultModel)
def extend_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –£–¥–ª–∏–Ω—è–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –µ—â–µ –∏ —É–¥–ª–∏–Ω—è–µ—Ç

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–ª–∏–Ω–∏—Ç—å
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    texts = data.context_data
    hint = data.hint
    logging.info(f"/extend_text\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())
        api.load_context(config.extend_context_path)
        api.prepare_query(texts, hint)
        logging.info(
            f"Ready to send request to ChatGPT with token={api.token}; query={api.query}")
        api.send_request()
        result = api.get_result()
        result_id = db.add_generated_data(hint, result)
        logging.info(f"/extend_text\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResultModel(status=OperationResult(code=0, message="Text extended"), text_data=result, result_id=result_id)
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=2, message=f"{exc}"), text_data="", result_id=-1)
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=6, message=f"{exc}"), text_data="", result_id=-1)


@app.post("/unmask_text", response_model=GenerateResultModel)
def unmask_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç `<MASK>` –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º `<MASK>`

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ `<MASK>`
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return OperationResult(code=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}")
        return OperationResult(code=3, message=f"{exc}")

    texts = data.context_data
    hint = data.hint
    logging.info(f"/unmask_text\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())
        api.load_context(config.unmask_context_path)
        api.prepare_query(texts, hint)
        logging.info(
            f"Ready to send request to ChatGPT with token={api.token}; query={api.query}")
        api.send_request()
        result = api.get_result()
        result_id = db.add_generated_data(hint, result)
        logging.info(f"/unmask_text\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResultModel(status=OperationResult(code=0, message="Text unmasked"), text_data=result, result_id=result_id)
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=2, message=f"{exc}"), text_data="", result_id=-1)
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResultModel(status=OperationResult(code=6, message=f"{exc}"), text_data="", result_id=-1)
