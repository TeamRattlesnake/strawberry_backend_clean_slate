"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º FastAPI
"""

import logging
import time

from fastapi import FastAPI, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi

from models import (
    FeedbackModel,
    GenerateQueryModel,
    SendFeedbackResult,
    GenerateResultData,
    GenerateResult,
    UserResults,
)
from config import Config
from database import Database, DBException
from utils import (
    is_valid,
    parse_query_string,
    filter_stop_words,
    UtilsException,
)
from nn_api import NNException, NNApi

logging.basicConfig(
    format="%(asctime)s %(message)s",
    handlers=[
        logging.FileHandler(
            f"/home/logs/log_{time.ctime().replace(' ', '_')}.txt",
            mode="w",
            encoding="UTF-8",
        )
    ],
    datefmt="%H:%M:%S UTC",
    level=logging.INFO,
)

app = FastAPI()
config = Config("config.json")
db = Database(
    config.db_user,
    config.db_password,
    config.db_name,
    config.db_port,
    config.db_host,
)

origins = [
    "*",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


DESCRIPTION = """
–í—ã–ø—É—Å–∫–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –û–¶ VK –≤ –ú–ì–¢–£ –∫–æ–º–∞–Ω–¥—ã Team Rattlesnake. –°–µ—Ä–≤–∏—Å, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π
–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é
–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å, —É–¥–ª–∏–Ω–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å
—Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π VK MiniAPP, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–±–Ω–æ
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –∏ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞. –°—Ç–∞–Ω—å—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤ —Å–µ—Ç–∏ —Å –ø–æ–º–æ—â—å—é
Strawberry!

* –ö–æ–ª–µ–Ω–∫–æ–≤ –ê–Ω–¥—Ä–µ–π - Team Lead, Backend Python Dev üçì
* –†–æ–º–∞–Ω –ú–µ–¥–Ω–∏–∫–æ–≤ - Frontend React Dev, ChatGPT Enthusiast üçì
* –í–∞—Å–∏–ª–∏–π –ï—Ä–º–∞–∫–æ–≤ - Data Scientist üçì

–ù–∞—à –ø–∞–±–ª–∏–∫: [Strawberry - –ü–æ–º–æ—â–Ω–∏–∫ –≤ –≤–µ–¥–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞](https://vk.com/strawberry_ai)

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: [Strawberry](https://vk.com/app51575840_226476923)
"""


def custom_openapi():
    """
    –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    """
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Strawberryüçì",
        version="1.0.0 - Clean Slate",
        description=DESCRIPTION,
        routes=app.routes,
        contact={
            "name": "Team Rattlesnake GitHub",
            "url": "https://github.com/TeamRattlesnake",
        },
    )
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi


@app.on_event("startup")
def startup():
    """
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
    –∏ —Å–¥–µ–ª–∞—Ç—å –µ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
    """
    logging.info("Server started")
    try:
        if db.need_migration():
            logging.info("Creating tables...")
            db.migrate()
            logging.info("Creating tables...\tOK")
    except DBException as exc:
        logging.error(f"Error while checking tables: {exc}")
        raise Exception("Error! Shutting down...") from exc


@app.post("/send_feedback", response_model=SendFeedbackResult)
def send_feedback(data: FeedbackModel, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.

    result_id - int, –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.

    score - int, –æ—Ü–µ–Ω–∫–∞, -1 –∏–ª–∏ 1.
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return SendFeedbackResult(status=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return SendFeedbackResult(
            status=3,
            message="Error in utils, probably the request was not correct",
        )

    result_id = data.result_id
    score = int(data.score)
    logging.info(f"/send_feedback\tresult_id={result_id}; score={score}")

    try:
        db.change_rating(result_id, score)
        logging.info(
            f"/send_feedback\tresult_id={result_id}; score={score}\tOK"
        )
        return SendFeedbackResult(status=0, message="Score updated")
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return SendFeedbackResult(status=6, message="Error in database")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return SendFeedbackResult(status=4, message="Unknown error")


@app.get("/get_user_results", response_model=UserResults)
def get_user_results(
    group_id=None, offset=None, limit=None, Authorization=Header()
):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–º —Ç–µ–∫—Å—Ç–æ–≤

    group_id - int, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ, —Ç–æ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ
    –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å,
    —Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞

    limit - int, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    offest - int, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, —Å–º–µ—â–µ–Ω–∏–µ
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return UserResults(
                status=1,
                message="Authorization error",
                data=[],
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return UserResults(
            status=3,
            message="Authorization error",
            data=[],
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return UserResults(
            status=1,
            message="Authorization error",
            data=[],
        )

    user_id = auth_data["vk_user_id"]

    logging.info(
        f"/get_user_results\tvk_user_id={user_id}; group_id={group_id}; offset={offset}; limit={limit}"
    )

    try:
        generated_results = db.get_users_texts(group_id, user_id, offset, limit)
        logging.info(
            f"/get_user_results\tvk_user_id={user_id}; group_id={group_id}; offset={offset}; limit={limit}\tOK"
        )
        return UserResults(
            status=0,
            message="Results returned",
            data=generated_results,
        )

    except DBException as exc:
        logging.error(
            f"Error in database while fetching user results text: {exc}"
        )
        return UserResults(
            status=6,
            message="Error in database while fetching user results text",
            data=[],
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return UserResults(
            status=4,
            message="Unknown error",
            data=[],
        )


def process_query(
    method: str, data: GenerateQueryModel, Authorization=Header()
) -> GenerateResultData:
    """
    –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å ChatGPT
    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return GenerateResult(
                status=1,
                message="Authorization error",
                data=GenerateResultData(text_data="", result_id=-1),
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return GenerateResult(
            status=3,
            message="Authorization error",
            data=GenerateResultData(text_data="", result_id=-1),
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return GenerateResult(
            status=4,
            message="Unknown error",
            data=GenerateResultData(text_data="", result_id=-1),
        )

    texts = data.context_data
    hint = data.hint
    user_id = auth_data["vk_user_id"]
    group_id = data.group_id
    gen_method = method

    logging.info(f"/{gen_method}\tlen(texts)={len(texts)}; hint={hint}")

    try:
        api = NNApi(config.next_token())

        if gen_method == "generate_text":
            api.load_context(config.gen_context_path)
        elif gen_method == "append_text":
            api.load_context(config.append_context_path)
        elif gen_method == "rephrase_text":
            api.load_context(config.rephrase_context_path)
        elif gen_method == "summarize_text":
            api.load_context(config.summarize_context_path)
        elif gen_method == "extend_text":
            api.load_context(config.extend_context_path)
        elif gen_method == "unmask_text":
            api.load_context(config.unmask_context_path)

        texts = [filter_stop_words(text) for text in texts]
        hint = filter_stop_words(hint)

        api.prepare_query(texts, hint)

        api.send_request()

        result = api.get_result()
        if gen_method == "append_text":
            result = result.replace(hint, "")
            result = f"{hint} {result}"

        result_id = db.add_generated_data(
            hint, result, user_id, gen_method, group_id
        )

        logging.info(f"/{gen_method}\tlen(texts)={len(texts)}; hint={hint}\tOK")
        return GenerateResult(
            status=0,
            message="OK",
            data=GenerateResultData(text_data=result, result_id=result_id),
        )
    except NNException as exc:
        logging.error(f"Error in NN API while generating text: {exc}")
        return GenerateResult(
            status=2,
            message="Error in NN API while generating text",
            data=GenerateResultData(text_data="", result_id=-1),
        )
    except DBException as exc:
        logging.error(f"Error in database while generating text: {exc}")
        return GenerateResult(
            status=6,
            message="Error in database while generating text",
            data=GenerateResultData(text_data="", result_id=-1),
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return GenerateResult(
            status=4,
            message="Unknown error",
            data=GenerateResultData(text_data="", result_id=-1),
        )


@app.post("/generate_text", response_model=GenerateResult)
def generate_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É, –∑–∞–¥–∞–Ω–Ω—É—é –≤ –∑–∞–ø—Ä–æ—Å–µ.
    –¢–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å –Ω—É–ª—è

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ
    –∫—Ä–∞—Ç–∫—É—é –º—ã—Å–ª—å, –æ —á–µ–º –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç. –ù—É–∂–Ω–æ
    —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_query("generate_text", data, Authorization)


@app.post("/append_text", response_model=GenerateResult)
def append_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –∏
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∫
    –∫–æ–Ω—Ü—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–µ–∫—Å—Ç

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç.
    –ù—É–∂–Ω–æ —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_query("append_text", data, Authorization)


@app.post("/rephrase_text", response_model=GenerateResult)
def rephrase_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–π –∂–µ
    –¥–ª–∏–Ω—ã, –Ω–æ –±–æ–ª–µ–µ —Å–∫–ª–∞–¥–Ω—ã–π –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤
    –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π
    –Ω–∞–¥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç. –ù—É–∂–Ω–æ
    —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è
    –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_query("rephrase_text", data, Authorization)


@app.post("/summarize_text", response_model=GenerateResult)
def summarize_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –†–µ–∑—é–º–∏—Ä—É–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å —Ç–µ–∫—Å—Ç–∞ –≤
    –∑–∞–ø—Ä–æ—Å–µ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤
    –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–ª—É—á—à–µ
    –¥–ª–∏–Ω–Ω—ã–π), –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —Å–∂–∞—Ç—å

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç. –ù—É–∂–Ω–æ
    —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è
    –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_query("summarize_text", data, Authorization)


@app.post("/extend_text", response_model=GenerateResult)
def extend_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –†–∞—Å—à–∏—Ä—è–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞ –≤—Ö–æ–¥ –∏–¥–µ—Ç —É–∂–µ
    –±–æ–ª—å—à–æ–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ—â–µ –±–æ–ª–µ–µ –∫—Ä–∞—Å–æ—á–Ω—ã–º –∏ –±–æ–ª—å—à–∏–º

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–ª—É—á—à–µ –∫–æ—Ä–æ—Ç–∫–∏–π),
    –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–ª–∏–Ω–∏—Ç—å

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç. –ù—É–∂–Ω–æ —á—Ç–æ–±—ã
    —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ
    —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_query("extend_text", data, Authorization)


@app.post("/unmask_text", response_model=GenerateResult)
def unmask_text(data: GenerateQueryModel, Authorization=Header()):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç '<MASK>' –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ –º–∞—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–ª–æ–≤–∞

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤
    –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å
    —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '<MASK>'

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç. –ù—É–∂–Ω–æ
    —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è
    –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_query("unmask_text", data, Authorization)
