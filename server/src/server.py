"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º FastAPI
"""

import logging
import time

from fastapi import BackgroundTasks, FastAPI, Header, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi

import requests

from models import (
    GenerateQueryModel,
    SendFeedbackResult,
    GenerateResultID,
    GenerateResultStatus,
    GenerateResultData,
    GenerateID,
    GenerateStatus,
    GenerateResult,
    UserResults,
    UploadFileModel,
    UploadFileResult,
)
from config import Config
from database import Database, DBException
from utils import (
    is_valid,
    parse_query_string,
    replace_stop_words,
    prepare_string,
    UtilsException,
)
from nn_api import NNException, NNApi

logging.basicConfig(
    format="%(asctime)s %(message)s",
    handlers=[
        logging.FileHandler(
            f"/home/logs/log_{time.ctime().replace(' ', '_')}.txt",
            mode="w",
            encoding="UTF-8",
        )
    ],
    datefmt="%H:%M:%S UTC",
    level=logging.INFO,
)

app = FastAPI()
config = Config("config.json")
db = Database(
    config.db_user,
    config.db_password,
    config.db_name,
    config.db_port,
    config.db_host,
)

origins = [
    "*",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DESCRIPTION = """
–í—ã–ø—É—Å–∫–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –û–¶ VK –≤ –ú–ì–¢–£ –∫–æ–º–∞–Ω–¥—ã Team Rattlesnake. –°–µ—Ä–≤–∏—Å, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π
–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é
–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å, —É–¥–ª–∏–Ω–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å
—Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π VK MiniAPP, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–±–Ω–æ
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –∏ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞. –°—Ç–∞–Ω—å—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤ —Å–µ—Ç–∏ —Å –ø–æ–º–æ—â—å—é
Strawberry!

* –ö–æ–ª–µ–Ω–∫–æ–≤ –ê–Ω–¥—Ä–µ–π - Team Lead, Backend Python Dev üçì
* –†–æ–º–∞–Ω –ú–µ–¥–Ω–∏–∫–æ–≤ - Frontend React Dev, ChatGPT Enthusiast, Perplexity Enthusiast üçì
* –í–∞—Å–∏–ª–∏–π –ï—Ä–º–∞–∫–æ–≤ - Data Scientist üçì

–ù–∞—à –ø–∞–±–ª–∏–∫: [Strawberry - –ü–æ–º–æ—â–Ω–∏–∫ –≤ –≤–µ–¥–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞](https://vk.com/strawberry_ai)

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: [Strawberry](https://vk.com/app51575840_226476923)
"""


def custom_openapi():
    """
    –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    """
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Strawberryüçì",
        version="1.6.0 - Clean Slate",
        description=DESCRIPTION,
        routes=app.routes,
        contact={
            "name": "Team Rattlesnake GitHub",
            "url": "https://github.com/TeamRattlesnake",
        },
    )
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi


@app.on_event("startup")
def startup():
    """
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
    –∏ —Å–¥–µ–ª–∞—Ç—å –µ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
    """
    logging.info("Server started")
    try:
        if db.need_migration():
            logging.info("Creating tables...")
            db.migrate()
            logging.info("Creating tables...\tOK")
    except DBException as exc:
        logging.error(f"Error while checking tables: {exc}")
        raise Exception("DB Error! Shutting down...") from exc
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        raise Exception("Unknown error! Shutting down...") from exc


@app.post(
    "/api/v1/post/{post_id}/like",
    response_model=SendFeedbackResult,
    tags=["–î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º"],
)
def send_like(post_id: int, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞ –Ω–∞ –ø–æ—Å—Ç

    post_id - –∞–π–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ generate

    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return SendFeedbackResult(status=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return SendFeedbackResult(
            status=3,
            message="Error in utils, probably the request was not correct",
        )

    result_id = int(post_id)

    logging.info(f"/like\tid={result_id}")

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], result_id):
            return SendFeedbackResult(status=1, message="Post is not yours")

        db.write_feedback(result_id, 1)
        logging.info(logging.info(f"/like\tid={result_id}\tOK"))
        return SendFeedbackResult(status=0, message="Post is liked")
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return SendFeedbackResult(status=6, message="Error in database")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return SendFeedbackResult(status=4, message="Unknown error")


@app.post(
    "/api/v1/post/{post_id}/dislike",
    response_model=SendFeedbackResult,
    tags=["–î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º"],
)
def send_dislike(post_id: int, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞ –Ω–∞ –ø–æ—Å—Ç

    post_id - –∞–π–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ generate

    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return SendFeedbackResult(status=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return SendFeedbackResult(
            status=3,
            message="Error in utils, probably the request was not correct",
        )

    result_id = int(post_id)

    logging.info(f"/dislike\tid={result_id}")

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], result_id):
            return SendFeedbackResult(status=1, message="Post is not yours")

        db.write_feedback(result_id, -1)
        logging.info(logging.info(f"/dislike\tid={result_id}\tOK"))
        return SendFeedbackResult(status=0, message="Post is disliked")
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return SendFeedbackResult(status=6, message="Error in database")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return SendFeedbackResult(status=4, message="Unknown error")


@app.delete(
    "/api/v1/post/{post_id}",
    response_model=SendFeedbackResult,
    tags=["–î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º"],
)
def send_hidden(post_id: int, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ—Å—Ç–∞

    post_id - –∞–π–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ generate

    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return SendFeedbackResult(status=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return SendFeedbackResult(
            status=3,
            message="Error in utils, probably the request was not correct",
        )

    result_id = int(post_id)

    logging.info(f"/delete\tid={result_id}")

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], result_id):
            return SendFeedbackResult(status=1, message="Post is not yours")

        db.hide_generation(result_id, 1)
        logging.info(logging.info(f"/delete\tid={result_id}\tOK"))
        return SendFeedbackResult(status=0, message="Post is hidden")
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return SendFeedbackResult(status=6, message="Error in database")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return SendFeedbackResult(status=4, message="Unknown error")


@app.post(
    "/api/v1/post/{post_id}/recover",
    response_model=SendFeedbackResult,
    tags=["–î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º"],
)
def send_recovered(post_id: int, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞

    post_id - –∞–π–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ generate

    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return SendFeedbackResult(status=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return SendFeedbackResult(
            status=3,
            message="Error in utils, probably the request was not correct",
        )

    result_id = int(post_id)

    logging.info(f"/recover\tid={result_id}")

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], result_id):
            return SendFeedbackResult(status=1, message="Post is not yours")

        db.hide_generation(result_id, 0)
        logging.info(logging.info(f"/recover\tid={result_id}\tOK"))
        return SendFeedbackResult(status=0, message="Post is recovered")
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return SendFeedbackResult(status=6, message="Error in database")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return SendFeedbackResult(status=4, message="Unknown error")


@app.post(
    "/api/v1/post/{post_id}/publish",
    response_model=SendFeedbackResult,
    tags=["–î–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º"],
)
def send_published(post_id: int, Authorization=Header()):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞=—Ñ–∞–∫—Ç–∞ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç

    post_id - –∞–π–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ generate

    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return SendFeedbackResult(status=1, message="Authorization error")
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return SendFeedbackResult(
            status=3,
            message="Error in utils, probably the request was not correct",
        )

    result_id = int(post_id)

    logging.info(f"/publish\tid={result_id}")

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], result_id):
            return SendFeedbackResult(status=1, message="Post is not yours")

        db.write_published(result_id)
        logging.info(logging.info(f"/publish\tid={result_id}\tOK"))
        return SendFeedbackResult(
            status=0, message="Post is marked as published"
        )
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return SendFeedbackResult(status=6, message="Error in database")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return SendFeedbackResult(status=4, message="Unknown error")


@app.get(
    "/api/v1/posts",
    response_model=UserResults,
    tags=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
)
def get_history(
    group_id: int = None,
    offset: int = None,
    limit: int = None,
    Authorization=Header(),
):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–º —Ç–µ–∫—Å—Ç–æ–≤

    group_id - int, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ, —Ç–æ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ
    –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å,
    —Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞

    limit - int, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    offest - int, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, —Å–º–µ—â–µ–Ω–∏–µ
    """

    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return UserResults(
                status=1,
                message="Authorization error",
                data=[],
                count=0,
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return UserResults(
            status=3,
            message="Authorization error",
            data=[],
            count=0,
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return UserResults(
            status=1,
            message="Unknown error",
            data=[],
            count=0,
        )

    user_id = auth_data["vk_user_id"]

    logging.info(
        f"/posts\tvk_user_id={user_id}; group_id={group_id}; offset={offset}; limit={limit}"
    )

    try:
        generated_results = db.get_users_texts(group_id, user_id)
        total_len = len(generated_results)
        if offset:
            generated_results = generated_results[offset:]
        if limit:
            generated_results = generated_results[:limit]
        logging.info(
            f"/posts\tvk_user_id={user_id}; group_id={group_id}; offset={offset}; limit={limit}\tOK"
        )
        return UserResults(
            status=0,
            message="Results returned",
            data=generated_results,
            count=total_len,
        )

    except DBException as exc:
        logging.error(
            f"Error in database while fetching user results text: {exc}"
        )
        return UserResults(
            status=6,
            message="Error in database while fetching user results text",
            data=[],
            count=0,
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return UserResults(
            status=4,
            message="Unknown error",
            data=[],
            count=0,
        )


def ask_nn(
    gen_method: str,
    texts: list[str],
    hint: str,
    gen_id: int,
):
    """
    –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
    """

    time_start = int(time.time())

    logging.info(
        f"/{gen_method}\tlen(texts)={len(texts)}; hint[:20]={hint[:20]}; gen_id={gen_id}"
    )

    token = None

    try:
        token = config.next_token()

        logging.info(f"Got token[:10]: {token[:10]}")

        api = NNApi(token=token)

        if gen_method == "generate_text":
            api.load_context(config.gen_context_path)
        elif gen_method == "append_text":
            api.load_context(config.append_context_path)
        elif gen_method == "rephrase_text":
            api.load_context(config.rephrase_context_path)
        elif gen_method == "summarize_text":
            api.load_context(config.summarize_context_path)
        elif gen_method == "extend_text":
            api.load_context(config.extend_context_path)
        elif gen_method == "unmask_text":
            api.load_context(config.unmask_context_path)
        elif gen_method == "gen_from_scratch":
            api.load_context(config.gen_from_scratch_context_path)

        if (gen_method != "gen_from_scratch") and (hint == ""):
            raise NNException(
                "Hint cannot be empty (unless it is gen_from_scratch)"
            )

        texts = [prepare_string(replace_stop_words(text)) for text in texts]
        hint = prepare_string(replace_stop_words(hint))

        api.prepare_query(texts, hint)

        api.send_request()

        result = prepare_string(api.get_result())

        if gen_method == "append_text":
            result = result.replace(hint, "")
            result = prepare_string(f"{hint} {result}")

        time_elapsed = int(time.time() - time_start)

        db.add_record_result(gen_id, result, time_elapsed)

        logging.info(
            f"/{gen_method}\tlen(texts)={len(texts)}; hint[:20]={hint[:20]}; gen_id={gen_id}\tOK"
        )

    except NNException as exc:
        logging.error(f"Error in NN API: {exc}\n")
        db.add_record_result(gen_id, "", 0, False)
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        db.add_record_result(gen_id, "", 0, False)
    finally:
        config.free()


def process_method(
    method: str,
    data: GenerateQueryModel,
    background_tasks: BackgroundTasks,
    Authorization=Header(),
):
    """
    –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    """
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return GenerateID(
                status=1,
                message="Authorization error",
                data=GenerateResultID(text_id=-1),
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return GenerateID(
            status=3,
            message="Authorization error",
            data=GenerateResultID(text_id=-1),
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return GenerateID(
            status=4,
            message="Unknown error",
            data=GenerateResultID(text_id=-1),
        )

    try:
        texts = data.context_data
        hint = data.hint
        user_id = auth_data["vk_user_id"]
        platform = auth_data["vk_platform"]
        group_id = data.group_id
        time_now = int(time.time())
    except KeyError as exc:
        logging.error(f"Key error. Check the header: {exc}")
        return GenerateID(
            status=4,
            message="Key error. Check the header",
            data=GenerateResultID(text_id=-1),
        )

    try:
        gen_id = db.add_record(
            hint,
            user_id,
            method,
            group_id,
            time_now,
            platform,
        )
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return GenerateID(
            status=6,
            message="Error in database",
            data=GenerateResultID(text_id=-1),
        )

    if not config.ready():
        logging.error("Service is not ready. Not enough tokens")
        db.add_record_result(gen_id, "", 0, False)
        return GenerateID(
            status=7,
            message="Server is not ready",
            data=GenerateResultID(text_id=-1),
        )

    background_tasks.add_task(ask_nn, method, texts, hint, gen_id)

    return GenerateID(
        status=0,
        message="OK",
        data=GenerateResultID(text_id=gen_id),
    )


@app.post(
    "/api/v1/generation/generate",
    response_model=GenerateID,
    tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"],
)
def generate(
    data: GenerateQueryModel,
    background_tasks: BackgroundTasks,
    Authorization=Header(),
):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

    method - GenerationMethod, —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "generate_text", "append_text", "rephrase_text",
    "summarize_text", "extend_text", "unmask_text", gen_from_scratch

    context_data - list[str], —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    –≤ –ø–∞–±–ª–∏–∫–µ (–ª—É—á—à–µ –Ω–µ –º–µ–Ω–µ–µ 3-5 –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ )

    hint - str, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ
    –∫—Ä–∞—Ç–∫—É—é –º—ã—Å–ª—å, –æ —á–µ–º –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç (–¥–ª—è gen_from_scratch
    –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç–æ–π)

    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç. –ù—É–∂–Ω–æ
    —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π –∏ –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∞–π–¥–∏
    """
    return process_method(
        data.method,
        data,
        background_tasks,
        Authorization,
    )


@app.get(
    "/api/v1/generation/status",
    response_model=GenerateStatus,
    tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"],
)
def get_status(text_id, Authorization=Header()):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, 0 - –Ω–µ –≥–æ—Ç–æ–≤–æ, 1 - –≥–æ—Ç–æ–≤–æ,
    2 - –æ—à–∏–±–∫–∞

    text_id - –∞–π–¥–∏ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    logging.info(f"/get_gen_status\ttext_id={text_id}")
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return GenerateStatus(
                status=1,
                message="Authorization error",
                data=GenerateResultStatus(text_status=-1),
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return GenerateStatus(
            status=3,
            message="Authorization error",
            data=GenerateResultStatus(text_status=-1),
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return GenerateStatus(
            status=4,
            message="Unknown error",
            data=GenerateResultStatus(text_status=-1),
        )

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], text_id):
            return GenerateResultStatus(
                status=1,
                message="Post is not yours",
                data=GenerateResultStatus(text_status=-1),
            )

        status = db.get_status(text_id)
        logging.info(f"/get_gen_status\ttext_id={text_id}\tOK")
        return GenerateStatus(
            status=0,
            message="OK",
            data=GenerateResultStatus(text_status=status),
        )

    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return GenerateStatus(
            status=6,
            message="Error in database",
            data=GenerateResultStatus(text_status=-1),
        )


@app.get(
    "/api/v1/generation/result",
    response_model=GenerateResult,
    tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"],
)
def get_result(text_id, Authorization=Header()):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –∞–π–¥–∏

    text_id - –∞–π–¥–∏ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    logging.info(f"/get_gen_result\ttext_id={text_id}")
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return GenerateResult(
                status=1,
                message="Authorization error",
                data=GenerateResultStatus(text_status=-1),
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return GenerateResult(
            status=3,
            message="Authorization error",
            data=GenerateResultData(text_data=""),
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return GenerateResult(
            status=4,
            message="Unknown error",
            data=GenerateResultData(text_data=""),
        )

    try:
        if not db.user_owns_post(auth_data["vk_user_id"], text_id):
            return GenerateResult(
                status=1,
                message="Post is not yours",
                data=GenerateResultData(text_data=""),
            )

        result = db.get_value(text_id)
        logging.info(f"/get_gen_result\ttext_id={text_id}\tOK")
        return GenerateResult(
            status=0,
            message="OK",
            data=GenerateResultData(text_data=result),
        )
    except DBException as exc:
        logging.error(f"Error in database: {exc}")
        return GenerateResult(
            status=6,
            message="Error in database",
            data=GenerateResultData(text_data=""),
        )


@app.post(
    "/api/v1/files/upload",
    response_model=UploadFileResult,
    tags=["–§–∞–π–ª—ã"],
)
def upload_file(
    file: UploadFile,
    data: UploadFileModel,
    Authorization=Header(),
):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

    token - str, —Ç–æ–∫–µ–Ω
    group_id - int, –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã
    """
    logging.info("/upload")
    try:
        auth_data = parse_query_string(Authorization)
        if not is_valid(query=auth_data, secret=config.client_secret):
            return UploadFileResult(
                status=1,
                message="Authorization error",
                file_url="",
            )
    except UtilsException as exc:
        logging.error(
            f"Error in utils, probably the request was not correct: {exc}"
        )
        return UploadFileResult(
            status=3,
            message="Authorization error",
            file_url="",
        )
    except Exception as exc:
        logging.error(f"Unknown error: {exc}")
        return UploadFileResult(
            status=4,
            message="Unknown error",
            file_url="",
        )

    file_data = file.file
    content_type = file.content_type
    filename = file.filename
    token = data.token
    group_id = data.group_id

    logging.info(f"{content_type}, {filename}, {token}, {group_id}")

    try:
        if content_type in ["image/png", "image/jpeg", "image/gif"]:
            response = requests.get(
                "https://api.vk.com/method/photos.getWallUploadServer",
                params={"group_id": group_id, "access_token": token},
                timeout=5,
            )
            logging.info(f"GET SERVER\n{response.json()}")
            upload_url = response.json()["upload_url"]
            response = requests.post(
                upload_url, files={"photo": file_data}, timeout=5
            )
            logging.info(f"UPLOAD\n{response.json()}")
            server = response.json()["server"]
            photo = response.json()["photo"]
            hash_ = response.json()["hash"]
            response = requests.post(
                "https://api.vk.com/method/photos.saveWallPhoto",
                params={"access_token": token, "server": server, "hash": hash_},
                files={"photo": photo},
                timeout=5,
            )
            logging.info(f"SAVE\n{response.json()}")
            sizes = response.json()["response"][0]["sizes"]
            needed_size_ind = 0
            for i, _ in enumerate(sizes):
                if sizes[i]["height"] > sizes[needed_size_ind]["height"]:
                    needed_size_ind = i
            url = sizes[needed_size_ind]["url"]
            return UploadFileResult(
                status=0,
                message="Photo is uploaded",
                file_url=url,
            )

        response = requests.get(
            "https://api.vk.com/method/docs.getWallUploadServer",
            params={"group_id": group_id, "access_token": token},
            timeout=5,
        )
        logging.info(f"GET SERVER\n{response.json()}")
        upload_url = response.json()["upload_url"]
        response = requests.post(
            upload_url, files={"file": file_data}, timeout=5
        )
        logging.info(f"UPLOAD\n{response.json()}")
        file_response = response.json()["file"]
        response = requests.post(
            "https://api.vk.com/method/docs.save",
            params={"access_token": token},
            files={"file": file_response},
            timeout=5,
        )
        logging.info(f"SAVE\n{response.json()}")
        url = response.json()["response"]["doc"]["url"]
        return UploadFileResult(
            status=0,
            message="File is uploaded",
            file_url=url,
        )

    except Exception as exc:
        logging.info(f"Error in /upload: {exc}")
        return UploadFileResult(
            status=4,
            message="Unknown error",
            file_url="",
        )
